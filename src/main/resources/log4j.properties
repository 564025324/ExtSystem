#log4j.rootLogger=CONSOLE,info,error,DEBUG
log4j.rootLogger=info,error,CONSOLE,DEBUG

log4j.appender.CONSOLE=org.apache.log4j.ConsoleAppender     
log4j.appender.CONSOLE.layout=org.apache.log4j.PatternLayout     
log4j.appender.CONSOLE.layout.ConversionPattern=%d{yyyy-MM-dd-HH-mm} [%t] [%c] [%p] - %m%n     

log4j.logger.info=info
log4j.appender.info=org.apache.log4j.DailyRollingFileAppender
log4j.appender.info.layout=org.apache.log4j.PatternLayout     
log4j.appender.info.layout.ConversionPattern=%d{yyyy-MM-dd-HH-mm} [%t] [%c] [%p] - %m%n  
log4j.appender.info.datePattern='.'yyyy-MM-dd
log4j.appender.info.Threshold = info   
log4j.appender.info.append=true   
#log4j.appender.info.File=/home/admin/pms-api-services/logs/info/api_services_info
log4j.appender.info.File=/Users/dddd/Documents/testspace/pms-api-services/logs/info/api_services_info

log4j.logger.error=error  
log4j.appender.error=org.apache.log4j.DailyRollingFileAppender
log4j.appender.error.layout=org.apache.log4j.PatternLayout     
log4j.appender.error.layout.ConversionPattern=%d{yyyy-MM-dd-HH-mm} [%t] [%c] [%p] - %m%n  
log4j.appender.error.datePattern='.'yyyy-MM-dd
log4j.appender.error.Threshold = error   
log4j.appender.error.append=true   
#log4j.appender.error.File=/home/admin/pms-api-services/logs/error/api_services_error
log4j.appender.error.File=/Users/dddd/Documents/testspace/pms-api-services/logs/error/api_services_error

log4j.logger.DEBUG=DEBUG
log4j.appender.DEBUG=org.apache.log4j.DailyRollingFileAppender
log4j.appender.DEBUG.layout=org.apache.log4j.PatternLayout     
log4j.appender.DEBUG.layout.ConversionPattern=%d{yyyy-MM-dd-HH-mm} [%t] [%c] [%p] - %m%n  
log4j.appender.DEBUG.datePattern='.'yyyy-MM-dd
log4j.appender.DEBUG.Threshold = DEBUG   
log4j.appender.DEBUG.append=true   
#log4j.appender.DEBUG.File=/home/admin/pms-api-services/logs/debug/api_services_debug
log4j.appender.DEBUG.File=/Users/dddd/Documents/testspace/pms-api-services/logs/debug/api_services_debug

### Debug
log4j.logger.com.ibatis=DEBUG
log4j.logger.com.ibatis.common.jdbc.SimpleDataSource=DEBUG
log4j.logger.com.ibatis.common.jdbc.ScriptRunner=DEBUG
log4j.logger.com.ibatis.sqlmap.engine.impl.SqlMapClientDelegate=DEBUG
log4j.logger.java.sql.Connection=DEBUG
log4j.logger.java.sql.Statement=DEBUG
log4j.logger.java.sql.PreparedStatement=DEBUG


## 上述log4j.properties文件中，当前配置为线下开发模式，若部署线上环境，需要释放掉注释语句，并注释线下配置语句。
#log4j.appender.info.File=/home/admin/pms-api-services/logs/info/api_services_info
#log4j.appender.info.File=/Users/dddd/Documents/testspace/pms-api-services/logs/info/api_services_info




## -------------------------
# version2
#此句为定义名为stdout的输出端是哪种类型，可以是
#org.apache.log4j.CosoleAppender（控制台），
##org.apache.log4j.FileAppender（文件），
##org.apache.log4j.DailyRollingFileAppender（每天产生一个日志文件），
##org.apache.log4j.RollingFileAppender（文件大小到达指定尺寸的时候产生一个新的文件）
##org.apache.log4j.WriterAppender（将日志信息以流格式发送到任意指定的地方）
#log4j.appender.stdout=org.apache.log4j.ConsoleAppender
#
##此句为定义名为stdout的输出端的layout是哪种类型，可以是
##org.apache.log4j.HTMLLayout（以HTML表格形式布局），
##org.apache.log4j.PatternLayout（可以灵活地指定布局模式），
##org.apache.log4j.SimpleLayout（包含日志信息的级别和信息字符串），
##org.apache.log4j.TTCCLayout（包含日志产生的时间、线程、类别等等信息）
#log4j.appender.stdout.layout=org.apache.log4j.PatternLayout
#
##如果使用pattern布局就要指定的打印信息的具体格式ConversionPattern，打印参数如下：
##%m 输出代码中指定的消息
##%p 输出优先级，即DEBUG，INFO，WARN，ERROR，FATAL
##%r 输出自应用启动到输出该log信息耗费的毫秒数
##%c 输出所属的类目，通常就是所在类的全名
##%t 输出产生该日志事件的线程名
##%n 输出一个回车换行符，Windows平台为“rn”，Unix平台为“n”
##%d 输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式
##比如：%d{yyyy MMM dd HH:mm:ss,SSS} 输出类似：2002年10月18日 22：10：28，921
##%l 输出日志事件的发生位置，包括类目名、发生的线程，以及在代码中的行数。
##[Log4JDemo]是log信息的开头，可以为任意字符，一般为项目简称。
##log4j.appender.stdout.layout.ConversionPattern=[Log4JDemo] %p [%t] %C.%M(%L) | %m%n
#log4j.appender.stdout.layout.ConversionPattern=[Log4JDemo] %p [%t] %C.%M(%L) | %m%n
#
##设置日志文件
#log4j.appender.LogFile=org.apache.log4j.FileAppender
#log4j.appender.LogFile.File=log4j.log
#log4j.appender.LogFile.layout=org.apache.log4j.PatternLayout
#log4j.appender.LogFile.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss} %l? %m%n
#
##此句为将等级为ALL的日志信息输出到stdout和LogFile这两个目的地
##stdout和R的定义在下面的代码，可以任意起名
##等级可分为OFF、FATAL、ERROR、WARN、INFO、DEBUG、ALL
##如果配置OFF则不打出任何信息
##如果配置为INFO这样只显示INFO, WARN, ERROR的log信息，而DEBUG信息不会被显示，
##log4j.rootCategory=ERROR,stdout,LogFile
##log4j.rootCategory=ERROR,LogFile
#log4j.rootCategory=ERROR,stdoutn